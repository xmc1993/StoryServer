<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.edu.nju.software.dao.CommentMapper">
    <resultMap id="BaseResultMap" type="cn.edu.nju.software.entity.Comment">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="ambitusId" property="ambitusId" jdbcType="INTEGER"/>
        <result column="userId" property="userId" jdbcType="INTEGER"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="likeCount" property="likeCount" jdbcType="INTEGER"/>
        <result column="cream" property="cream" jdbcType="INTEGER"/>
        <result column="picUrls" property="picUrls" jdbcType="VARCHAR"/>
        <result column="createTime" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="state" property="state" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, ambitusId, userId, content, likeCount, cream, picUrls, createTime, state
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.edu.nju.software.entity.CommentExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from comment
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from comment
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from comment
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="cn.edu.nju.software.entity.CommentExample">
        delete from comment
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.edu.nju.software.entity.Comment">
    insert into comment (id, ambitusId, userId, 
      content, likeCount, cream, 
      picUrls, createTime, state
      )
    values (#{id,jdbcType=INTEGER}, #{ambitusId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{content,jdbcType=VARCHAR}, #{likeCount,jdbcType=INTEGER}, #{cream,jdbcType=INTEGER}, 
      #{picUrls,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{state,jdbcType=INTEGER}
      )
  </insert>
    <insert id="insertSelective" parameterType="cn.edu.nju.software.entity.Comment">
        insert into comment
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="ambitusId != null">
                ambitusId,
            </if>
            <if test="userId != null">
                userId,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="likeCount != null">
                likeCount,
            </if>
            <if test="cream != null">
                cream,
            </if>
            <if test="picUrls != null">
                picUrls,
            </if>
            <if test="createTime != null">
                createTime,
            </if>
            <if test="state != null">
                state,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="ambitusId != null">
                #{ambitusId,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="likeCount != null">
                #{likeCount,jdbcType=INTEGER},
            </if>
            <if test="cream != null">
                #{cream,jdbcType=INTEGER},
            </if>
            <if test="picUrls != null">
                #{picUrls,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="state != null">
                #{state,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.edu.nju.software.entity.CommentExample"
            resultType="java.lang.Integer">
        select count(*) from comment
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update comment
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.ambitusId != null">
                ambitusId = #{record.ambitusId,jdbcType=INTEGER},
            </if>
            <if test="record.userId != null">
                userId = #{record.userId,jdbcType=INTEGER},
            </if>
            <if test="record.content != null">
                content = #{record.content,jdbcType=VARCHAR},
            </if>
            <if test="record.likeCount != null">
                likeCount = #{record.likeCount,jdbcType=INTEGER},
            </if>
            <if test="record.cream != null">
                cream = #{record.cream,jdbcType=INTEGER},
            </if>
            <if test="record.picUrls != null">
                picUrls = #{record.picUrls,jdbcType=VARCHAR},
            </if>
            <if test="record.createTime != null">
                createTime = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.state != null">
                state = #{record.state,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update comment
        set id = #{record.id,jdbcType=INTEGER},
        ambitusId = #{record.ambitusId,jdbcType=INTEGER},
        userId = #{record.userId,jdbcType=INTEGER},
        content = #{record.content,jdbcType=VARCHAR},
        likeCount = #{record.likeCount,jdbcType=INTEGER},
        cream = #{record.cream,jdbcType=INTEGER},
        picUrls = #{record.picUrls,jdbcType=VARCHAR},
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
        state = #{record.state,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.edu.nju.software.entity.Comment">
        update comment
        <set>
            <if test="ambitusId != null">
                ambitusId = #{ambitusId,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                userId = #{userId,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=VARCHAR},
            </if>
            <if test="likeCount != null">
                likeCount = #{likeCount,jdbcType=INTEGER},
            </if>
            <if test="cream != null">
                cream = #{cream,jdbcType=INTEGER},
            </if>
            <if test="picUrls != null">
                picUrls = #{picUrls,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                createTime = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.edu.nju.software.entity.Comment">
    update comment
    set ambitusId = #{ambitusId,jdbcType=INTEGER},
      userId = #{userId,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR},
      likeCount = #{likeCount,jdbcType=INTEGER},
      cream = #{cream,jdbcType=INTEGER},
      picUrls = #{picUrls,jdbcType=VARCHAR},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <update id="newLike">
    update comment
    set likeCount = likeCount+1
    where id=#{0}
  </update>

    <update id="deleteLike">
    update comment
    set likeCount = likeCount-1
    where id=#{0}
  </update>

    <select id="getCommentsByAmbitusId" resultType="cn.edu.nju.software.entity.Comment"
            parameterType="java.lang.Integer">
    SELECT
	`comment`.*,
	`user`.nickname AS userName,
	`user`.headImgUrl AS userHeadImg
    FROM
	`comment`
	INNER JOIN `user` ON `comment`.userId = `user`.id
    WHERE
	state = 1
	AND ambitusId = #{0}
    ORDER BY
	cream DESC,
	likeCount DESC,
	createTime
	limit #{1},#{2}
  </select>
</mapper>