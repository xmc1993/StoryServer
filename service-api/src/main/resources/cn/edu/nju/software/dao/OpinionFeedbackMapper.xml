<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.edu.nju.software.dao.OpinionFeedbackMapper" >
  <resultMap id="BaseResultMap" type="cn.edu.nju.software.entity.OpinionFeedback" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="model" property="model" jdbcType="VARCHAR" />
    <result column="appVersion" property="appVersion" jdbcType="VARCHAR" />
    <result column="androidVersion" property="androidVersion" jdbcType="VARCHAR" />
    <result column="networkEnvironment" property="networkEnvironment" jdbcType="VARCHAR" />
    <result column="connection" property="connection" jdbcType="VARCHAR" />
    <result column="userId" property="userId" jdbcType="INTEGER" />
    <result column="description" property="description" jdbcType="VARCHAR" />
    <result column="picUrls" property="picUrls" jdbcType="VARCHAR" />
    <result column="opinionType" property="opinionType" jdbcType="VARCHAR" />
    <result column="createTime" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, model, appVersion, androidVersion, networkEnvironment, connection, userId, description, 
    picUrls, opinionType, createTime
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.edu.nju.software.entity.OpinionFeedbackExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from opinion_feedback
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from opinion_feedback
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from opinion_feedback
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.edu.nju.software.entity.OpinionFeedbackExample" >
    delete from opinion_feedback
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.edu.nju.software.entity.OpinionFeedback" >
    insert into opinion_feedback (id, model, appVersion, 
      androidVersion, networkEnvironment, connection, 
      userId, description, picUrls, 
      opinionType, createTime)
    values (#{id,jdbcType=INTEGER}, #{model,jdbcType=VARCHAR}, #{appVersion,jdbcType=VARCHAR}, 
      #{androidVersion,jdbcType=VARCHAR}, #{networkEnvironment,jdbcType=VARCHAR}, #{connection,jdbcType=VARCHAR}, 
      #{userId,jdbcType=INTEGER}, #{description,jdbcType=VARCHAR}, #{picUrls,jdbcType=VARCHAR}, 
      #{opinionType,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.nju.software.entity.OpinionFeedback" >
    insert into opinion_feedback
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="model != null" >
        model,
      </if>
      <if test="appVersion != null" >
        appVersion,
      </if>
      <if test="androidVersion != null" >
        androidVersion,
      </if>
      <if test="networkEnvironment != null" >
        networkEnvironment,
      </if>
      <if test="connection != null" >
        connection,
      </if>
      <if test="userId != null" >
        userId,
      </if>
      <if test="description != null" >
        description,
      </if>
      <if test="picUrls != null" >
        picUrls,
      </if>
      <if test="opinionType != null" >
        opinionType,
      </if>
      <if test="createTime != null" >
        createTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="model != null" >
        #{model,jdbcType=VARCHAR},
      </if>
      <if test="appVersion != null" >
        #{appVersion,jdbcType=VARCHAR},
      </if>
      <if test="androidVersion != null" >
        #{androidVersion,jdbcType=VARCHAR},
      </if>
      <if test="networkEnvironment != null" >
        #{networkEnvironment,jdbcType=VARCHAR},
      </if>
      <if test="connection != null" >
        #{connection,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="description != null" >
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="picUrls != null" >
        #{picUrls,jdbcType=VARCHAR},
      </if>
      <if test="opinionType != null" >
        #{opinionType,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.edu.nju.software.entity.OpinionFeedbackExample" resultType="java.lang.Integer" >
    select count(*) from opinion_feedback
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update opinion_feedback
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.model != null" >
        model = #{record.model,jdbcType=VARCHAR},
      </if>
      <if test="record.appVersion != null" >
        appVersion = #{record.appVersion,jdbcType=VARCHAR},
      </if>
      <if test="record.androidVersion != null" >
        androidVersion = #{record.androidVersion,jdbcType=VARCHAR},
      </if>
      <if test="record.networkEnvironment != null" >
        networkEnvironment = #{record.networkEnvironment,jdbcType=VARCHAR},
      </if>
      <if test="record.connection != null" >
        connection = #{record.connection,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null" >
        userId = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.description != null" >
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.picUrls != null" >
        picUrls = #{record.picUrls,jdbcType=VARCHAR},
      </if>
      <if test="record.opinionType != null" >
        opinionType = #{record.opinionType,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update opinion_feedback
    set id = #{record.id,jdbcType=INTEGER},
      model = #{record.model,jdbcType=VARCHAR},
      appVersion = #{record.appVersion,jdbcType=VARCHAR},
      androidVersion = #{record.androidVersion,jdbcType=VARCHAR},
      networkEnvironment = #{record.networkEnvironment,jdbcType=VARCHAR},
      connection = #{record.connection,jdbcType=VARCHAR},
      userId = #{record.userId,jdbcType=INTEGER},
      description = #{record.description,jdbcType=VARCHAR},
      picUrls = #{record.picUrls,jdbcType=VARCHAR},
      opinionType = #{record.opinionType,jdbcType=VARCHAR},
      createTime = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.nju.software.entity.OpinionFeedback" >
    update opinion_feedback
    <set >
      <if test="model != null" >
        model = #{model,jdbcType=VARCHAR},
      </if>
      <if test="appVersion != null" >
        appVersion = #{appVersion,jdbcType=VARCHAR},
      </if>
      <if test="androidVersion != null" >
        androidVersion = #{androidVersion,jdbcType=VARCHAR},
      </if>
      <if test="networkEnvironment != null" >
        networkEnvironment = #{networkEnvironment,jdbcType=VARCHAR},
      </if>
      <if test="connection != null" >
        connection = #{connection,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        userId = #{userId,jdbcType=INTEGER},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="picUrls != null" >
        picUrls = #{picUrls,jdbcType=VARCHAR},
      </if>
      <if test="opinionType != null" >
        opinionType = #{opinionType,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.nju.software.entity.OpinionFeedback" >
    update opinion_feedback
    set model = #{model,jdbcType=VARCHAR},
      appVersion = #{appVersion,jdbcType=VARCHAR},
      androidVersion = #{androidVersion,jdbcType=VARCHAR},
      networkEnvironment = #{networkEnvironment,jdbcType=VARCHAR},
      connection = #{connection,jdbcType=VARCHAR},
      userId = #{userId,jdbcType=INTEGER},
      description = #{description,jdbcType=VARCHAR},
      picUrls = #{picUrls,jdbcType=VARCHAR},
      opinionType = #{opinionType,jdbcType=VARCHAR},
      createTime = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getOpinionsWithUserName" resultType="cn.edu.nju.software.entity.OpinionFeedback">
    SELECT user.nickname as userName,opinion_feedback.*
    FROM user INNER JOIN opinion_feedback on user.id=opinion_feedback.userId
  </select>

</mapper>